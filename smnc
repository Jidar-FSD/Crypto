import requests
import time
import numpy as np

# Binance API'si ile veri çekme
def get_data(symbol="BTCUSDT", interval="1h", limit=50):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    response = requests.get(url)
    data = response.json()
    closes = [float(item[4]) for item in data]
    volumes = [float(item[5]) for item in data]
    return closes, volumes

# RSI Hesaplama (Relative Strength Index)
def rsi(prices, period=14):
    gains = []
    losses = []
    for i in range(1, len(prices)):
        delta = prices[i] - prices[i - 1]
        if delta >= 0:
            gains.append(delta)
            losses.append(0)
        else:
            gains.append(0)
            losses.append(abs(delta))

    avg_gain = np.mean(gains[-period:])
    avg_loss = np.mean(losses[-period:])
    
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

# MACD hesaplama
def macd(prices, fast_period=12, slow_period=26, signal_period=9):
    exp1 = np.exp(np.arange(1, fast_period + 1) * -1 / fast_period)
    exp2 = np.exp(np.arange(1, slow_period + 1) * -1 / slow_period)
    
    fast_ema = np.convolve(prices, exp1, mode='valid')[-1]
    slow_ema = np.convolve(prices, exp2, mode='valid')[-1]
    macd_line = fast_ema - slow_ema
    signal_line = np.mean([macd_line[-i] for i in range(signal_period)])
    
    return macd_line, signal_line

# Yapay Zeka Tabalı Kripto Analizi
def ai_analysis(symbol="BTCUSDT"):
    closes, _ = get_data(symbol)
    rsi_value = rsi(closes)
    macd_line, signal_line = macd(closes)

    ai_score = 0
    analysis_reason = []

    # RSI değeri ile işlem önerisi
    if rsi_value < 30:
        ai_score += 3
        analysis_reason.append(f"RSI düşük, alım fırsatı: {rsi_value}")
    elif rsi_value > 70:
        ai_score += 2
        analysis_reason.append(f"RSI yüksek, satım fırsatı: {rsi_value}")
    else:
        analysis_reason.append(f"RSI dengeli: {rsi_value}")

    # MACD ile işlem önerisi
    if macd_line > signal_line:
        ai_score += 3
        analysis_reason.append(f"MACD yükseliş gösteriyor")
    else:
        ai_score += 2
        analysis_reason.append(f"MACD düşüş gösteriyor")

    # Yapay zeka analizi ile öneri
    if ai_score >= 5:
        recommendation = "Yatırım yapmanız uygun."
    else:
        recommendation = "Daha fazla gözlem yapmalısınız."

    print(f"\n=== {symbol} Analizi ===")
    print(f"AI Skoru: {ai_score}/10")
    print("Sebep: " + " | ".join(analysis_reason))
    print(f"Karar: {recommendation}\n")

# Kullanıcı İle Etkileşim
def user_interaction():
    print("Hoş geldiniz! Kripto yatırım botuna.")
    username = input("Kullanıcı adı: ")

    # Kullanıcıyı yetkilendir
    authorized_users = ["admin"]
    if username not in authorized_users:
        print("Erişim reddedildi.")
        return

    # Coin seçimi yapma (yapay zeka tahminini görmek)
    symbol = input("Coin adı girin (örnek: BTCUSDT, ETHUSDT): ").upper()

    # Coinin analizini yap
    ai_analysis(symbol)

    # Kullanıcıya sürekli veri izleme önerisi (her 5 dakikada bir analiz yapabilir)
    while True:
        time.sleep(300)  # 5 dakika
        ai_analysis(symbol)

# Ana fonksiyon çalıştırma
if __name__ == "__main__":
    user_interaction()
